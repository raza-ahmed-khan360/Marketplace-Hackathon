// middleware.ts
import { NextResponse } from "next/server";
import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server";
import { KindeUser } from "@kinde-oss/kinde-auth-nextjs/types"; // ğŸ‘ˆ Import KindeUser type

// ğŸ›  Custom user type with roles
interface CustomKindeUser extends KindeUser {
  user_roles?: string[]; // ğŸ‘ˆ Explicitly define user_roles
}

export async function middleware(req: Request) {
  const { getUser } = getKindeServerSession();
  const user = (await getUser()) as CustomKindeUser; // ğŸ‘ˆ Typecast user

  // ğŸ›  Redirect to login if not authenticated
  if (!user) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // ğŸ”¹ Ensure user_roles exists
  const roles = user.user_roles || [];

  // ğŸ›  Redirect based on role
  if (roles.includes("admin")) {
    return NextResponse.redirect(new URL("/admin", req.url));
  }

  return NextResponse.redirect(new URL("/user", req.url));
}

export const config = {
  matcher: "/dashboard/:path*", // Middleware applies to /dashboard routes
};
